import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author ZHIDONG YANG
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");

        int tIndex = getChildElement(channel, "title");
        String title = "";
        if (channel.child(tIndex).numberOfChildren() > 0) {
            title = channel.child(tIndex).child(0).label();
        }

        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        int lIndex = getChildElement(channel, "link");
        String link = "";

        link = channel.child(lIndex).child(0).label();

        out.println("<h1>");
        out.println("<a href='" + link + "'>" + title + "</a>");
        out.println("</h1>");

        int dIndex = getChildElement(channel, "description");
        String description = "";
        if (channel.child(dIndex).numberOfChildren() > 0) {
            description = channel.child(dIndex).child(0).label();
        }

        out.println("<p>");
        out.println(description);
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int getChild = -1;
        for (int i = 0; i < xml.numberOfChildren() && getChild == -1; i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                getChild = i;
            }
        }
        return getChild;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Assigns a value to the String pubDate if there is a date listed //
        out.println("<tr>");

        String pubDate = "";
        int numPubDate = getChildElement(item, "pubDate");

        if (numPubDate != -1) {
            pubDate = item.child(numPubDate).child(0).label();
        } else {
            pubDate = "No Date Available";
        }
        out.println("<td>" + pubDate + "</td>"); // output the pubdate //

        // Assigns a value to the String source if there is a source listed //

        String source = "source", url = "";
        int numSource = getChildElement(item, "source");

        if (numSource != -1) {
            source = item.child(numSource).child(0).label();
            url = item.child(numSource).attributeValue("url");
            out.println(
                    "<td><a href=\"" + url + "\">" + source + "</a>" + "</td>");
        } else {
            source = "No source available";
            out.println("<td>" + source + "</td>");
        }

        // Assigns a value to the String news if there is a title or descriptionlisted //
        String title = "";
        int numDescription = getChildElement(item, "description");
        int numTitle = getChildElement(item, "title");
        int numLink = getChildElement(item, "link");

        if (numTitle != -1 && item.child(numTitle).numberOfChildren() != 0) {
            title = item.child(numTitle).child(0).label();
        } else if (numDescription != -1
                && item.child(numDescription).numberOfChildren() != 0) {
            title = item.child(numDescription).child(0).label();
        } else {
            title = "No title available";
        }

        if (numLink != -1) {
            String link = item.child(numLink).child(0).label();
            out.println(
                    "<td><a href=\"" + link + "\">" + title + "</a>" + "</td>");
        } else {
            out.println("<td>" + title + "</td>");
        }

        // closes the table //
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     * to file, appends to out.content any needed messages]
     * </pre>
     */

    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        if (xml.isTag() && xml.label().equals("rss")
                && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            SimpleWriter fOut = new SimpleWriter1L(file);
            XMLTree channel = xml.child(getChildElement(xml, "channel"));

            outputHeader(channel, fOut);

            int i = 0;
            while (i < channel.numberOfChildren()) {
                if (channel.child(i).label().equals("item")) {
                    XMLTree item = channel.child(i);
                    processItem(item, fOut);
                }
                i++;
            }
            outputFooter(fOut);
            fOut.close();
        } else {
            out.println("The input is not a valid RSS 2.0 feed.");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * ask name and url
         */
        out.println("Enter the name of the name of an XML file: ");
        String feedName = in.nextLine();
        out.println("Enter the XML file: ");
        String feedUrl = in.nextLine();
        XMLTree feeds = new XMLTree1(feedUrl);

        /*
         * out file
         */
        SimpleWriter outFile = new SimpleWriter1L(feedName);
        /*
         * header
         */
        outFile.println("<html>");
        outFile.println("<head>");
        String title = feeds.attributeValue("title");
        outFile.println("<title>" + title + "</title>");
        outFile.println("</head>");
        /*
         * body part
         */
        outFile.println("<body>");
        outFile.println("<h2>" + title + "</h2>");
        outFile.println("<ul>");

        /*
         * use while loop output HTML page
         */
        int i = 0;
        while (i < feeds.numberOfChildren()) {
            XMLTree feed = feeds.child(i);
            String url = feed.attributeValue("url");
            String name = feed.attributeValue("name");
            String file = feed.attributeValue("file");
            processFeed(url, file, out);
            outFile.println(
                    "<li><a href=\"" + file + "\">" + name + "</a>" + "</li>");
            i++;

        }
        outFile.println("</ul>");
        outFile.println("</body>");
        outFile.println("</html>");

        /*
         * close the writer
         */
        outFile.close();
        in.close();
        out.close();
    }

}
